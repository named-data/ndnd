// Code generated by ndn tlv codegen DO NOT EDIT.
package mgmt_2022

import (
	"io"
	"strings"

	"time"

	enc "github.com/named-data/ndnd/std/encoding"
)

type StrategyEncoder struct {
	Length uint

	Name_length uint
}

type StrategyParsingContext struct {
}

func (encoder *StrategyEncoder) Init(value *Strategy) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	encoder.Length = l

}

func (context *StrategyParsingContext) Init() {

}

func (encoder *StrategyEncoder) EncodeInto(value *Strategy, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
}

func (encoder *StrategyEncoder) Encode(value *Strategy) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *StrategyParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*Strategy, error) {

	var handled_Name bool = false

	progress := -1
	_ = progress

	value := &Strategy{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *Strategy) Encode() enc.Wire {
	encoder := StrategyEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *Strategy) Bytes() []byte {
	return value.Encode().Join()
}

func ParseStrategy(reader enc.WireView, ignoreCritical bool) (*Strategy, error) {
	context := StrategyParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

func (value *Strategy) ToDict() map[string]any {
	dict := map[string]any{}
	if value.Name != nil {
		dict["Name"] = value.Name
	}
	return dict
}

func DictToStrategy(dict map[string]any) (*Strategy, error) {
	value := &Strategy{}
	var err error = nil
	if vv, ok := dict["Name"]; ok {
		if v, ok := vv.(enc.Name); ok {
			value.Name = v
		} else {
			err = enc.ErrIncompatibleType{Name: "Name", TypeNum: 7, ValType: "Name", Value: vv}
		}
	} else {
		value.Name = nil
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

type ControlArgsEncoder struct {
	Length uint

	Name_length uint

	Strategy_encoder StrategyEncoder
}

type ControlArgsParsingContext struct {
	Strategy_context StrategyParsingContext
}

func (encoder *ControlArgsEncoder) Init(value *ControlArgs) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}

	if value.Strategy != nil {
		encoder.Strategy_encoder.Init(value.Strategy)
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	if optval, ok := value.FaceId.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Uri.Get(); ok {
		l += 1
		l += uint(enc.TLNum(len(optval)).EncodingLength())
		l += uint(len(optval))
	}
	if optval, ok := value.LocalUri.Get(); ok {
		l += 1
		l += uint(enc.TLNum(len(optval)).EncodingLength())
		l += uint(len(optval))
	}
	if optval, ok := value.Origin.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Cost.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Capacity.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Count.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Flags.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Mask.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if value.Strategy != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Strategy_encoder.Length).EncodingLength())
		l += encoder.Strategy_encoder.Length
	}
	if optval, ok := value.ExpirationPeriod.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.FacePersistency.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.BaseCongestionMarkInterval.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.DefaultCongestionThreshold.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Mtu.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	encoder.Length = l

}

func (context *ControlArgsParsingContext) Init() {

	context.Strategy_context.Init()

}

func (encoder *ControlArgsEncoder) EncodeInto(value *ControlArgs, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	if optval, ok := value.FaceId.Get(); ok {
		buf[pos] = byte(105)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Uri.Get(); ok {
		buf[pos] = byte(114)
		pos += 1
		pos += uint(enc.TLNum(len(optval)).EncodeInto(buf[pos:]))
		copy(buf[pos:], optval)
		pos += uint(len(optval))
	}
	if optval, ok := value.LocalUri.Get(); ok {
		buf[pos] = byte(129)
		pos += 1
		pos += uint(enc.TLNum(len(optval)).EncodeInto(buf[pos:]))
		copy(buf[pos:], optval)
		pos += uint(len(optval))
	}
	if optval, ok := value.Origin.Get(); ok {
		buf[pos] = byte(111)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Cost.Get(); ok {
		buf[pos] = byte(106)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Capacity.Get(); ok {
		buf[pos] = byte(131)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Count.Get(); ok {
		buf[pos] = byte(132)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Flags.Get(); ok {
		buf[pos] = byte(108)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Mask.Get(); ok {
		buf[pos] = byte(112)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if value.Strategy != nil {
		buf[pos] = byte(107)
		pos += 1
		pos += uint(enc.TLNum(encoder.Strategy_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Strategy_encoder.Length > 0 {
			encoder.Strategy_encoder.EncodeInto(value.Strategy, buf[pos:])
			pos += encoder.Strategy_encoder.Length
		}
	}
	if optval, ok := value.ExpirationPeriod.Get(); ok {
		buf[pos] = byte(109)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.FacePersistency.Get(); ok {
		buf[pos] = byte(133)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.BaseCongestionMarkInterval.Get(); ok {
		buf[pos] = byte(135)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.DefaultCongestionThreshold.Get(); ok {
		buf[pos] = byte(136)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Mtu.Get(); ok {
		buf[pos] = byte(137)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
}

func (encoder *ControlArgsEncoder) Encode(value *ControlArgs) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *ControlArgsParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*ControlArgs, error) {

	var handled_Name bool = false
	var handled_FaceId bool = false
	var handled_Uri bool = false
	var handled_LocalUri bool = false
	var handled_Origin bool = false
	var handled_Cost bool = false
	var handled_Capacity bool = false
	var handled_Count bool = false
	var handled_Flags bool = false
	var handled_Mask bool = false
	var handled_Strategy bool = false
	var handled_ExpirationPeriod bool = false
	var handled_FacePersistency bool = false
	var handled_BaseCongestionMarkInterval bool = false
	var handled_DefaultCongestionThreshold bool = false
	var handled_Mtu bool = false

	progress := -1
	_ = progress

	value := &ControlArgs{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			case 105:
				if true {
					handled = true
					handled_FaceId = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.FaceId.Set(optval)
					}
				}
			case 114:
				if true {
					handled = true
					handled_Uri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.Uri.Set(builder.String())
						}
					}
				}
			case 129:
				if true {
					handled = true
					handled_LocalUri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.LocalUri.Set(builder.String())
						}
					}
				}
			case 111:
				if true {
					handled = true
					handled_Origin = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Origin.Set(optval)
					}
				}
			case 106:
				if true {
					handled = true
					handled_Cost = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Cost.Set(optval)
					}
				}
			case 131:
				if true {
					handled = true
					handled_Capacity = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Capacity.Set(optval)
					}
				}
			case 132:
				if true {
					handled = true
					handled_Count = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Count.Set(optval)
					}
				}
			case 108:
				if true {
					handled = true
					handled_Flags = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Flags.Set(optval)
					}
				}
			case 112:
				if true {
					handled = true
					handled_Mask = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Mask.Set(optval)
					}
				}
			case 107:
				if true {
					handled = true
					handled_Strategy = true
					value.Strategy, err = context.Strategy_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			case 109:
				if true {
					handled = true
					handled_ExpirationPeriod = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.ExpirationPeriod.Set(optval)
					}
				}
			case 133:
				if true {
					handled = true
					handled_FacePersistency = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.FacePersistency.Set(optval)
					}
				}
			case 135:
				if true {
					handled = true
					handled_BaseCongestionMarkInterval = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.BaseCongestionMarkInterval.Set(optval)
					}
				}
			case 136:
				if true {
					handled = true
					handled_DefaultCongestionThreshold = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.DefaultCongestionThreshold.Set(optval)
					}
				}
			case 137:
				if true {
					handled = true
					handled_Mtu = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Mtu.Set(optval)
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}
	if !handled_FaceId && err == nil {
		value.FaceId.Unset()
	}
	if !handled_Uri && err == nil {
		value.Uri.Unset()
	}
	if !handled_LocalUri && err == nil {
		value.LocalUri.Unset()
	}
	if !handled_Origin && err == nil {
		value.Origin.Unset()
	}
	if !handled_Cost && err == nil {
		value.Cost.Unset()
	}
	if !handled_Capacity && err == nil {
		value.Capacity.Unset()
	}
	if !handled_Count && err == nil {
		value.Count.Unset()
	}
	if !handled_Flags && err == nil {
		value.Flags.Unset()
	}
	if !handled_Mask && err == nil {
		value.Mask.Unset()
	}
	if !handled_Strategy && err == nil {
		value.Strategy = nil
	}
	if !handled_ExpirationPeriod && err == nil {
		value.ExpirationPeriod.Unset()
	}
	if !handled_FacePersistency && err == nil {
		value.FacePersistency.Unset()
	}
	if !handled_BaseCongestionMarkInterval && err == nil {
		value.BaseCongestionMarkInterval.Unset()
	}
	if !handled_DefaultCongestionThreshold && err == nil {
		value.DefaultCongestionThreshold.Unset()
	}
	if !handled_Mtu && err == nil {
		value.Mtu.Unset()
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *ControlArgs) Encode() enc.Wire {
	encoder := ControlArgsEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *ControlArgs) Bytes() []byte {
	return value.Encode().Join()
}

func ParseControlArgs(reader enc.WireView, ignoreCritical bool) (*ControlArgs, error) {
	context := ControlArgsParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

func (value *ControlArgs) ToDict() map[string]any {
	dict := map[string]any{}
	if value.Name != nil {
		dict["Name"] = value.Name
	}
	if optval, ok := value.FaceId.Get(); ok {
		dict["FaceId"] = optval
	}
	if optval, ok := value.Uri.Get(); ok {
		dict["Uri"] = optval
	}
	if optval, ok := value.LocalUri.Get(); ok {
		dict["LocalUri"] = optval
	}
	if optval, ok := value.Origin.Get(); ok {
		dict["Origin"] = optval
	}
	if optval, ok := value.Cost.Get(); ok {
		dict["Cost"] = optval
	}
	if optval, ok := value.Capacity.Get(); ok {
		dict["Capacity"] = optval
	}
	if optval, ok := value.Count.Get(); ok {
		dict["Count"] = optval
	}
	if optval, ok := value.Flags.Get(); ok {
		dict["Flags"] = optval
	}
	if optval, ok := value.Mask.Get(); ok {
		dict["Mask"] = optval
	}
	if value.Strategy != nil {
		dict["Strategy"] = value.Strategy.ToDict()
	}
	if optval, ok := value.ExpirationPeriod.Get(); ok {
		dict["ExpirationPeriod"] = optval
	}
	if optval, ok := value.FacePersistency.Get(); ok {
		dict["FacePersistency"] = optval
	}
	if optval, ok := value.BaseCongestionMarkInterval.Get(); ok {
		dict["BaseCongestionMarkInterval"] = optval
	}
	if optval, ok := value.DefaultCongestionThreshold.Get(); ok {
		dict["DefaultCongestionThreshold"] = optval
	}
	if optval, ok := value.Mtu.Get(); ok {
		dict["Mtu"] = optval
	}
	return dict
}

func DictToControlArgs(dict map[string]any) (*ControlArgs, error) {
	value := &ControlArgs{}
	var err error = nil
	if vv, ok := dict["Name"]; ok {
		if v, ok := vv.(enc.Name); ok {
			value.Name = v
		} else {
			err = enc.ErrIncompatibleType{Name: "Name", TypeNum: 7, ValType: "Name", Value: vv}
		}
	} else {
		value.Name = nil
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["FaceId"]; ok {
		if v, ok := vv.(uint64); ok {
			value.FaceId.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "FaceId", TypeNum: 105, ValType: "uint64", Value: vv}
		}
	} else {
		value.FaceId.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Uri"]; ok {
		if v, ok := vv.(string); ok {
			value.Uri.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Uri", TypeNum: 114, ValType: "string", Value: vv}
		}
	} else {
		value.Uri.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["LocalUri"]; ok {
		if v, ok := vv.(string); ok {
			value.LocalUri.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "LocalUri", TypeNum: 129, ValType: "string", Value: vv}
		}
	} else {
		value.LocalUri.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Origin"]; ok {
		if v, ok := vv.(uint64); ok {
			value.Origin.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Origin", TypeNum: 111, ValType: "uint64", Value: vv}
		}
	} else {
		value.Origin.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Cost"]; ok {
		if v, ok := vv.(uint64); ok {
			value.Cost.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Cost", TypeNum: 106, ValType: "uint64", Value: vv}
		}
	} else {
		value.Cost.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Capacity"]; ok {
		if v, ok := vv.(uint64); ok {
			value.Capacity.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Capacity", TypeNum: 131, ValType: "uint64", Value: vv}
		}
	} else {
		value.Capacity.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Count"]; ok {
		if v, ok := vv.(uint64); ok {
			value.Count.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Count", TypeNum: 132, ValType: "uint64", Value: vv}
		}
	} else {
		value.Count.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Flags"]; ok {
		if v, ok := vv.(uint64); ok {
			value.Flags.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Flags", TypeNum: 108, ValType: "uint64", Value: vv}
		}
	} else {
		value.Flags.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Mask"]; ok {
		if v, ok := vv.(uint64); ok {
			value.Mask.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Mask", TypeNum: 112, ValType: "uint64", Value: vv}
		}
	} else {
		value.Mask.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Strategy"]; ok {
		if v, ok := vv.(*Strategy); ok {
			value.Strategy = v
		} else {
			err = enc.ErrIncompatibleType{Name: "Strategy", TypeNum: 107, ValType: "*Strategy", Value: vv}
		}
	} else {
		value.Strategy = nil
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["ExpirationPeriod"]; ok {
		if v, ok := vv.(uint64); ok {
			value.ExpirationPeriod.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "ExpirationPeriod", TypeNum: 109, ValType: "uint64", Value: vv}
		}
	} else {
		value.ExpirationPeriod.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["FacePersistency"]; ok {
		if v, ok := vv.(uint64); ok {
			value.FacePersistency.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "FacePersistency", TypeNum: 133, ValType: "uint64", Value: vv}
		}
	} else {
		value.FacePersistency.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["BaseCongestionMarkInterval"]; ok {
		if v, ok := vv.(uint64); ok {
			value.BaseCongestionMarkInterval.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "BaseCongestionMarkInterval", TypeNum: 135, ValType: "uint64", Value: vv}
		}
	} else {
		value.BaseCongestionMarkInterval.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["DefaultCongestionThreshold"]; ok {
		if v, ok := vv.(uint64); ok {
			value.DefaultCongestionThreshold.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "DefaultCongestionThreshold", TypeNum: 136, ValType: "uint64", Value: vv}
		}
	} else {
		value.DefaultCongestionThreshold.Unset()
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Mtu"]; ok {
		if v, ok := vv.(uint64); ok {
			value.Mtu.Set(v)
		} else {
			err = enc.ErrIncompatibleType{Name: "Mtu", TypeNum: 137, ValType: "uint64", Value: vv}
		}
	} else {
		value.Mtu.Unset()
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

type ControlResponseValEncoder struct {
	Length uint

	Params_encoder ControlArgsEncoder
}

type ControlResponseValParsingContext struct {
	Params_context ControlArgsParsingContext
}

func (encoder *ControlResponseValEncoder) Init(value *ControlResponseVal) {

	if value.Params != nil {
		encoder.Params_encoder.Init(value.Params)
	}

	l := uint(0)
	l += 1
	l += uint(1 + enc.Nat(value.StatusCode).EncodingLength())
	l += 1
	l += uint(enc.TLNum(len(value.StatusText)).EncodingLength())
	l += uint(len(value.StatusText))
	if value.Params != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Params_encoder.Length).EncodingLength())
		l += encoder.Params_encoder.Length
	}
	encoder.Length = l

}

func (context *ControlResponseValParsingContext) Init() {

	context.Params_context.Init()
}

func (encoder *ControlResponseValEncoder) EncodeInto(value *ControlResponseVal, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(102)
	pos += 1

	buf[pos] = byte(enc.Nat(value.StatusCode).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(103)
	pos += 1
	pos += uint(enc.TLNum(len(value.StatusText)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.StatusText)
	pos += uint(len(value.StatusText))
	if value.Params != nil {
		buf[pos] = byte(104)
		pos += 1
		pos += uint(enc.TLNum(encoder.Params_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Params_encoder.Length > 0 {
			encoder.Params_encoder.EncodeInto(value.Params, buf[pos:])
			pos += encoder.Params_encoder.Length
		}
	}
}

func (encoder *ControlResponseValEncoder) Encode(value *ControlResponseVal) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *ControlResponseValParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*ControlResponseVal, error) {

	var handled_StatusCode bool = false
	var handled_StatusText bool = false
	var handled_Params bool = false

	progress := -1
	_ = progress

	value := &ControlResponseVal{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 102:
				if true {
					handled = true
					handled_StatusCode = true
					value.StatusCode = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.StatusCode = uint64(value.StatusCode<<8) | uint64(x)
						}
					}
				}
			case 103:
				if true {
					handled = true
					handled_StatusText = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.StatusText = builder.String()
						}
					}
				}
			case 104:
				if true {
					handled = true
					handled_Params = true
					value.Params, err = context.Params_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_StatusCode && err == nil {
		err = enc.ErrSkipRequired{Name: "StatusCode", TypeNum: 102}
	}
	if !handled_StatusText && err == nil {
		err = enc.ErrSkipRequired{Name: "StatusText", TypeNum: 103}
	}
	if !handled_Params && err == nil {
		value.Params = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *ControlResponseVal) Encode() enc.Wire {
	encoder := ControlResponseValEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *ControlResponseVal) Bytes() []byte {
	return value.Encode().Join()
}

func ParseControlResponseVal(reader enc.WireView, ignoreCritical bool) (*ControlResponseVal, error) {
	context := ControlResponseValParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

func (value *ControlResponseVal) ToDict() map[string]any {
	dict := map[string]any{}
	dict["StatusCode"] = value.StatusCode
	dict["StatusText"] = value.StatusText
	if value.Params != nil {
		dict["Params"] = value.Params.ToDict()
	}
	return dict
}

func DictToControlResponseVal(dict map[string]any) (*ControlResponseVal, error) {
	value := &ControlResponseVal{}
	var err error = nil
	if vv, ok := dict["StatusCode"]; ok {
		if v, ok := vv.(uint64); ok {
			value.StatusCode = v
		} else {
			err = enc.ErrIncompatibleType{Name: "StatusCode", TypeNum: 102, ValType: "uint64", Value: vv}
		}
	} else {
		err = enc.ErrSkipRequired{Name: "StatusCode", TypeNum: 102}
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["StatusText"]; ok {
		if v, ok := vv.(string); ok {
			value.StatusText = v
		} else {
			err = enc.ErrIncompatibleType{Name: "StatusText", TypeNum: 103, ValType: "string", Value: vv}
		}
	} else {
		err = enc.ErrSkipRequired{Name: "StatusText", TypeNum: 103}
	}
	if err != nil {
		return nil, err
	}
	if vv, ok := dict["Params"]; ok {
		if v, ok := vv.(*ControlArgs); ok {
			value.Params = v
		} else {
			err = enc.ErrIncompatibleType{Name: "Params", TypeNum: 104, ValType: "*ControlArgs", Value: vv}
		}
	} else {
		value.Params = nil
	}
	if err != nil {
		return nil, err
	}
	return value, nil
}

type ControlParametersEncoder struct {
	Length uint

	Val_encoder ControlArgsEncoder
}

type ControlParametersParsingContext struct {
	Val_context ControlArgsParsingContext
}

func (encoder *ControlParametersEncoder) Init(value *ControlParameters) {
	if value.Val != nil {
		encoder.Val_encoder.Init(value.Val)
	}

	l := uint(0)
	if value.Val != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Val_encoder.Length).EncodingLength())
		l += encoder.Val_encoder.Length
	}
	encoder.Length = l

}

func (context *ControlParametersParsingContext) Init() {
	context.Val_context.Init()
}

func (encoder *ControlParametersEncoder) EncodeInto(value *ControlParameters, buf []byte) {

	pos := uint(0)

	if value.Val != nil {
		buf[pos] = byte(104)
		pos += 1
		pos += uint(enc.TLNum(encoder.Val_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Val_encoder.Length > 0 {
			encoder.Val_encoder.EncodeInto(value.Val, buf[pos:])
			pos += encoder.Val_encoder.Length
		}
	}
}

func (encoder *ControlParametersEncoder) Encode(value *ControlParameters) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *ControlParametersParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*ControlParameters, error) {

	var handled_Val bool = false

	progress := -1
	_ = progress

	value := &ControlParameters{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 104:
				if true {
					handled = true
					handled_Val = true
					value.Val, err = context.Val_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Val && err == nil {
		value.Val = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *ControlParameters) Encode() enc.Wire {
	encoder := ControlParametersEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *ControlParameters) Bytes() []byte {
	return value.Encode().Join()
}

func ParseControlParameters(reader enc.WireView, ignoreCritical bool) (*ControlParameters, error) {
	context := ControlParametersParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type ControlResponseEncoder struct {
	Length uint

	Val_encoder ControlResponseValEncoder
}

type ControlResponseParsingContext struct {
	Val_context ControlResponseValParsingContext
}

func (encoder *ControlResponseEncoder) Init(value *ControlResponse) {
	if value.Val != nil {
		encoder.Val_encoder.Init(value.Val)
	}

	l := uint(0)
	if value.Val != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Val_encoder.Length).EncodingLength())
		l += encoder.Val_encoder.Length
	}
	encoder.Length = l

}

func (context *ControlResponseParsingContext) Init() {
	context.Val_context.Init()
}

func (encoder *ControlResponseEncoder) EncodeInto(value *ControlResponse, buf []byte) {

	pos := uint(0)

	if value.Val != nil {
		buf[pos] = byte(101)
		pos += 1
		pos += uint(enc.TLNum(encoder.Val_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Val_encoder.Length > 0 {
			encoder.Val_encoder.EncodeInto(value.Val, buf[pos:])
			pos += encoder.Val_encoder.Length
		}
	}
}

func (encoder *ControlResponseEncoder) Encode(value *ControlResponse) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *ControlResponseParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*ControlResponse, error) {

	var handled_Val bool = false

	progress := -1
	_ = progress

	value := &ControlResponse{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 101:
				if true {
					handled = true
					handled_Val = true
					value.Val, err = context.Val_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Val && err == nil {
		value.Val = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *ControlResponse) Encode() enc.Wire {
	encoder := ControlResponseEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *ControlResponse) Bytes() []byte {
	return value.Encode().Join()
}

func ParseControlResponse(reader enc.WireView, ignoreCritical bool) (*ControlResponse, error) {
	context := ControlResponseParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FaceEventNotificationValueEncoder struct {
	Length uint
}

type FaceEventNotificationValueParsingContext struct {
}

func (encoder *FaceEventNotificationValueEncoder) Init(value *FaceEventNotificationValue) {

	l := uint(0)
	l += 1
	l += uint(1 + enc.Nat(value.FaceEventKind).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.FaceId).EncodingLength())
	l += 1
	l += uint(enc.TLNum(len(value.Uri)).EncodingLength())
	l += uint(len(value.Uri))
	l += 1
	l += uint(enc.TLNum(len(value.LocalUri)).EncodingLength())
	l += uint(len(value.LocalUri))
	l += 1
	l += uint(1 + enc.Nat(value.FaceScope).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.FacePersistency).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.LinkType).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.Flags).EncodingLength())
	encoder.Length = l

}

func (context *FaceEventNotificationValueParsingContext) Init() {

}

func (encoder *FaceEventNotificationValueEncoder) EncodeInto(value *FaceEventNotificationValue, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(193)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FaceEventKind).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(105)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FaceId).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(114)
	pos += 1
	pos += uint(enc.TLNum(len(value.Uri)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.Uri)
	pos += uint(len(value.Uri))
	buf[pos] = byte(129)
	pos += 1
	pos += uint(enc.TLNum(len(value.LocalUri)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.LocalUri)
	pos += uint(len(value.LocalUri))
	buf[pos] = byte(132)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FaceScope).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(133)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FacePersistency).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(134)
	pos += 1

	buf[pos] = byte(enc.Nat(value.LinkType).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(108)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Flags).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

func (encoder *FaceEventNotificationValueEncoder) Encode(value *FaceEventNotificationValue) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FaceEventNotificationValueParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FaceEventNotificationValue, error) {

	var handled_FaceEventKind bool = false
	var handled_FaceId bool = false
	var handled_Uri bool = false
	var handled_LocalUri bool = false
	var handled_FaceScope bool = false
	var handled_FacePersistency bool = false
	var handled_LinkType bool = false
	var handled_Flags bool = false

	progress := -1
	_ = progress

	value := &FaceEventNotificationValue{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 193:
				if true {
					handled = true
					handled_FaceEventKind = true
					value.FaceEventKind = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FaceEventKind = uint64(value.FaceEventKind<<8) | uint64(x)
						}
					}
				}
			case 105:
				if true {
					handled = true
					handled_FaceId = true
					value.FaceId = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FaceId = uint64(value.FaceId<<8) | uint64(x)
						}
					}
				}
			case 114:
				if true {
					handled = true
					handled_Uri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.Uri = builder.String()
						}
					}
				}
			case 129:
				if true {
					handled = true
					handled_LocalUri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.LocalUri = builder.String()
						}
					}
				}
			case 132:
				if true {
					handled = true
					handled_FaceScope = true
					value.FaceScope = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FaceScope = uint64(value.FaceScope<<8) | uint64(x)
						}
					}
				}
			case 133:
				if true {
					handled = true
					handled_FacePersistency = true
					value.FacePersistency = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FacePersistency = uint64(value.FacePersistency<<8) | uint64(x)
						}
					}
				}
			case 134:
				if true {
					handled = true
					handled_LinkType = true
					value.LinkType = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.LinkType = uint64(value.LinkType<<8) | uint64(x)
						}
					}
				}
			case 108:
				if true {
					handled = true
					handled_Flags = true
					value.Flags = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Flags = uint64(value.Flags<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_FaceEventKind && err == nil {
		err = enc.ErrSkipRequired{Name: "FaceEventKind", TypeNum: 193}
	}
	if !handled_FaceId && err == nil {
		err = enc.ErrSkipRequired{Name: "FaceId", TypeNum: 105}
	}
	if !handled_Uri && err == nil {
		err = enc.ErrSkipRequired{Name: "Uri", TypeNum: 114}
	}
	if !handled_LocalUri && err == nil {
		err = enc.ErrSkipRequired{Name: "LocalUri", TypeNum: 129}
	}
	if !handled_FaceScope && err == nil {
		err = enc.ErrSkipRequired{Name: "FaceScope", TypeNum: 132}
	}
	if !handled_FacePersistency && err == nil {
		err = enc.ErrSkipRequired{Name: "FacePersistency", TypeNum: 133}
	}
	if !handled_LinkType && err == nil {
		err = enc.ErrSkipRequired{Name: "LinkType", TypeNum: 134}
	}
	if !handled_Flags && err == nil {
		err = enc.ErrSkipRequired{Name: "Flags", TypeNum: 108}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FaceEventNotificationValue) Encode() enc.Wire {
	encoder := FaceEventNotificationValueEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FaceEventNotificationValue) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFaceEventNotificationValue(reader enc.WireView, ignoreCritical bool) (*FaceEventNotificationValue, error) {
	context := FaceEventNotificationValueParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FaceEventNotificationEncoder struct {
	Length uint

	Val_encoder FaceEventNotificationValueEncoder
}

type FaceEventNotificationParsingContext struct {
	Val_context FaceEventNotificationValueParsingContext
}

func (encoder *FaceEventNotificationEncoder) Init(value *FaceEventNotification) {
	if value.Val != nil {
		encoder.Val_encoder.Init(value.Val)
	}

	l := uint(0)
	if value.Val != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Val_encoder.Length).EncodingLength())
		l += encoder.Val_encoder.Length
	}
	encoder.Length = l

}

func (context *FaceEventNotificationParsingContext) Init() {
	context.Val_context.Init()
}

func (encoder *FaceEventNotificationEncoder) EncodeInto(value *FaceEventNotification, buf []byte) {

	pos := uint(0)

	if value.Val != nil {
		buf[pos] = byte(192)
		pos += 1
		pos += uint(enc.TLNum(encoder.Val_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Val_encoder.Length > 0 {
			encoder.Val_encoder.EncodeInto(value.Val, buf[pos:])
			pos += encoder.Val_encoder.Length
		}
	}
}

func (encoder *FaceEventNotificationEncoder) Encode(value *FaceEventNotification) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FaceEventNotificationParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FaceEventNotification, error) {

	var handled_Val bool = false

	progress := -1
	_ = progress

	value := &FaceEventNotification{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 192:
				if true {
					handled = true
					handled_Val = true
					value.Val, err = context.Val_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Val && err == nil {
		value.Val = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FaceEventNotification) Encode() enc.Wire {
	encoder := FaceEventNotificationEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FaceEventNotification) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFaceEventNotification(reader enc.WireView, ignoreCritical bool) (*FaceEventNotification, error) {
	context := FaceEventNotificationParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type GeneralStatusEncoder struct {
	Length uint
}

type GeneralStatusParsingContext struct {
}

func (encoder *GeneralStatusEncoder) Init(value *GeneralStatus) {

	l := uint(0)
	l += 1
	l += uint(enc.TLNum(len(value.NfdVersion)).EncodingLength())
	l += uint(len(value.NfdVersion))
	l += 1
	l += uint(1 + enc.Nat(uint64(value.StartTimestamp/time.Millisecond)).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(uint64(value.CurrentTimestamp/time.Millisecond)).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NNameTreeEntries).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NFibEntries).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NPitEntries).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NMeasurementsEntries).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NCsEntries).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NInInterests).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NInData).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NInNacks).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NOutInterests).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NOutData).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NOutNacks).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NSatisfiedInterests).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NUnsatisfiedInterests).EncodingLength())
	if optval, ok := value.NFragmentationError.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NOutOverMtu.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NInLpInvalid.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NReassemblyTimeouts.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NInNetInvalid.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NAcknowledged.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NRetransmitted.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NRetxExhausted.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.NConngestionMarked.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	encoder.Length = l

}

func (context *GeneralStatusParsingContext) Init() {

}

func (encoder *GeneralStatusEncoder) EncodeInto(value *GeneralStatus, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(128)
	pos += 1
	pos += uint(enc.TLNum(len(value.NfdVersion)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.NfdVersion)
	pos += uint(len(value.NfdVersion))
	buf[pos] = byte(129)
	pos += 1

	buf[pos] = byte(enc.Nat(uint64(value.StartTimestamp / time.Millisecond)).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(130)
	pos += 1

	buf[pos] = byte(enc.Nat(uint64(value.CurrentTimestamp / time.Millisecond)).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(131)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NNameTreeEntries).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(132)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NFibEntries).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(133)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NPitEntries).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(134)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NMeasurementsEntries).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(135)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NCsEntries).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(144)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NInInterests).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(145)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NInData).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(151)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NInNacks).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(146)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NOutInterests).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(147)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NOutData).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(152)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NOutNacks).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(153)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NSatisfiedInterests).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(154)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NUnsatisfiedInterests).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	if optval, ok := value.NFragmentationError.Get(); ok {
		buf[pos] = byte(200)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NOutOverMtu.Get(); ok {
		buf[pos] = byte(201)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NInLpInvalid.Get(); ok {
		buf[pos] = byte(202)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NReassemblyTimeouts.Get(); ok {
		buf[pos] = byte(203)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NInNetInvalid.Get(); ok {
		buf[pos] = byte(204)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NAcknowledged.Get(); ok {
		buf[pos] = byte(205)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NRetransmitted.Get(); ok {
		buf[pos] = byte(206)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NRetxExhausted.Get(); ok {
		buf[pos] = byte(207)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.NConngestionMarked.Get(); ok {
		buf[pos] = byte(208)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
}

func (encoder *GeneralStatusEncoder) Encode(value *GeneralStatus) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *GeneralStatusParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*GeneralStatus, error) {

	var handled_NfdVersion bool = false
	var handled_StartTimestamp bool = false
	var handled_CurrentTimestamp bool = false
	var handled_NNameTreeEntries bool = false
	var handled_NFibEntries bool = false
	var handled_NPitEntries bool = false
	var handled_NMeasurementsEntries bool = false
	var handled_NCsEntries bool = false
	var handled_NInInterests bool = false
	var handled_NInData bool = false
	var handled_NInNacks bool = false
	var handled_NOutInterests bool = false
	var handled_NOutData bool = false
	var handled_NOutNacks bool = false
	var handled_NSatisfiedInterests bool = false
	var handled_NUnsatisfiedInterests bool = false
	var handled_NFragmentationError bool = false
	var handled_NOutOverMtu bool = false
	var handled_NInLpInvalid bool = false
	var handled_NReassemblyTimeouts bool = false
	var handled_NInNetInvalid bool = false
	var handled_NAcknowledged bool = false
	var handled_NRetransmitted bool = false
	var handled_NRetxExhausted bool = false
	var handled_NConngestionMarked bool = false

	progress := -1
	_ = progress

	value := &GeneralStatus{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 128:
				if true {
					handled = true
					handled_NfdVersion = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.NfdVersion = builder.String()
						}
					}
				}
			case 129:
				if true {
					handled = true
					handled_StartTimestamp = true
					{
						timeInt := uint64(0)
						timeInt = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								timeInt = uint64(timeInt<<8) | uint64(x)
							}
						}
						value.StartTimestamp = time.Duration(timeInt) * time.Millisecond
					}
				}
			case 130:
				if true {
					handled = true
					handled_CurrentTimestamp = true
					{
						timeInt := uint64(0)
						timeInt = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								timeInt = uint64(timeInt<<8) | uint64(x)
							}
						}
						value.CurrentTimestamp = time.Duration(timeInt) * time.Millisecond
					}
				}
			case 131:
				if true {
					handled = true
					handled_NNameTreeEntries = true
					value.NNameTreeEntries = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NNameTreeEntries = uint64(value.NNameTreeEntries<<8) | uint64(x)
						}
					}
				}
			case 132:
				if true {
					handled = true
					handled_NFibEntries = true
					value.NFibEntries = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NFibEntries = uint64(value.NFibEntries<<8) | uint64(x)
						}
					}
				}
			case 133:
				if true {
					handled = true
					handled_NPitEntries = true
					value.NPitEntries = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NPitEntries = uint64(value.NPitEntries<<8) | uint64(x)
						}
					}
				}
			case 134:
				if true {
					handled = true
					handled_NMeasurementsEntries = true
					value.NMeasurementsEntries = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NMeasurementsEntries = uint64(value.NMeasurementsEntries<<8) | uint64(x)
						}
					}
				}
			case 135:
				if true {
					handled = true
					handled_NCsEntries = true
					value.NCsEntries = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NCsEntries = uint64(value.NCsEntries<<8) | uint64(x)
						}
					}
				}
			case 144:
				if true {
					handled = true
					handled_NInInterests = true
					value.NInInterests = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NInInterests = uint64(value.NInInterests<<8) | uint64(x)
						}
					}
				}
			case 145:
				if true {
					handled = true
					handled_NInData = true
					value.NInData = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NInData = uint64(value.NInData<<8) | uint64(x)
						}
					}
				}
			case 151:
				if true {
					handled = true
					handled_NInNacks = true
					value.NInNacks = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NInNacks = uint64(value.NInNacks<<8) | uint64(x)
						}
					}
				}
			case 146:
				if true {
					handled = true
					handled_NOutInterests = true
					value.NOutInterests = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NOutInterests = uint64(value.NOutInterests<<8) | uint64(x)
						}
					}
				}
			case 147:
				if true {
					handled = true
					handled_NOutData = true
					value.NOutData = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NOutData = uint64(value.NOutData<<8) | uint64(x)
						}
					}
				}
			case 152:
				if true {
					handled = true
					handled_NOutNacks = true
					value.NOutNacks = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NOutNacks = uint64(value.NOutNacks<<8) | uint64(x)
						}
					}
				}
			case 153:
				if true {
					handled = true
					handled_NSatisfiedInterests = true
					value.NSatisfiedInterests = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NSatisfiedInterests = uint64(value.NSatisfiedInterests<<8) | uint64(x)
						}
					}
				}
			case 154:
				if true {
					handled = true
					handled_NUnsatisfiedInterests = true
					value.NUnsatisfiedInterests = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NUnsatisfiedInterests = uint64(value.NUnsatisfiedInterests<<8) | uint64(x)
						}
					}
				}
			case 200:
				if true {
					handled = true
					handled_NFragmentationError = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NFragmentationError.Set(optval)
					}
				}
			case 201:
				if true {
					handled = true
					handled_NOutOverMtu = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NOutOverMtu.Set(optval)
					}
				}
			case 202:
				if true {
					handled = true
					handled_NInLpInvalid = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NInLpInvalid.Set(optval)
					}
				}
			case 203:
				if true {
					handled = true
					handled_NReassemblyTimeouts = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NReassemblyTimeouts.Set(optval)
					}
				}
			case 204:
				if true {
					handled = true
					handled_NInNetInvalid = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NInNetInvalid.Set(optval)
					}
				}
			case 205:
				if true {
					handled = true
					handled_NAcknowledged = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NAcknowledged.Set(optval)
					}
				}
			case 206:
				if true {
					handled = true
					handled_NRetransmitted = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NRetransmitted.Set(optval)
					}
				}
			case 207:
				if true {
					handled = true
					handled_NRetxExhausted = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NRetxExhausted.Set(optval)
					}
				}
			case 208:
				if true {
					handled = true
					handled_NConngestionMarked = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.NConngestionMarked.Set(optval)
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_NfdVersion && err == nil {
		err = enc.ErrSkipRequired{Name: "NfdVersion", TypeNum: 128}
	}
	if !handled_StartTimestamp && err == nil {
		err = enc.ErrSkipRequired{Name: "StartTimestamp", TypeNum: 129}
	}
	if !handled_CurrentTimestamp && err == nil {
		err = enc.ErrSkipRequired{Name: "CurrentTimestamp", TypeNum: 130}
	}
	if !handled_NNameTreeEntries && err == nil {
		err = enc.ErrSkipRequired{Name: "NNameTreeEntries", TypeNum: 131}
	}
	if !handled_NFibEntries && err == nil {
		err = enc.ErrSkipRequired{Name: "NFibEntries", TypeNum: 132}
	}
	if !handled_NPitEntries && err == nil {
		err = enc.ErrSkipRequired{Name: "NPitEntries", TypeNum: 133}
	}
	if !handled_NMeasurementsEntries && err == nil {
		err = enc.ErrSkipRequired{Name: "NMeasurementsEntries", TypeNum: 134}
	}
	if !handled_NCsEntries && err == nil {
		err = enc.ErrSkipRequired{Name: "NCsEntries", TypeNum: 135}
	}
	if !handled_NInInterests && err == nil {
		err = enc.ErrSkipRequired{Name: "NInInterests", TypeNum: 144}
	}
	if !handled_NInData && err == nil {
		err = enc.ErrSkipRequired{Name: "NInData", TypeNum: 145}
	}
	if !handled_NInNacks && err == nil {
		err = enc.ErrSkipRequired{Name: "NInNacks", TypeNum: 151}
	}
	if !handled_NOutInterests && err == nil {
		err = enc.ErrSkipRequired{Name: "NOutInterests", TypeNum: 146}
	}
	if !handled_NOutData && err == nil {
		err = enc.ErrSkipRequired{Name: "NOutData", TypeNum: 147}
	}
	if !handled_NOutNacks && err == nil {
		err = enc.ErrSkipRequired{Name: "NOutNacks", TypeNum: 152}
	}
	if !handled_NSatisfiedInterests && err == nil {
		err = enc.ErrSkipRequired{Name: "NSatisfiedInterests", TypeNum: 153}
	}
	if !handled_NUnsatisfiedInterests && err == nil {
		err = enc.ErrSkipRequired{Name: "NUnsatisfiedInterests", TypeNum: 154}
	}
	if !handled_NFragmentationError && err == nil {
		value.NFragmentationError.Unset()
	}
	if !handled_NOutOverMtu && err == nil {
		value.NOutOverMtu.Unset()
	}
	if !handled_NInLpInvalid && err == nil {
		value.NInLpInvalid.Unset()
	}
	if !handled_NReassemblyTimeouts && err == nil {
		value.NReassemblyTimeouts.Unset()
	}
	if !handled_NInNetInvalid && err == nil {
		value.NInNetInvalid.Unset()
	}
	if !handled_NAcknowledged && err == nil {
		value.NAcknowledged.Unset()
	}
	if !handled_NRetransmitted && err == nil {
		value.NRetransmitted.Unset()
	}
	if !handled_NRetxExhausted && err == nil {
		value.NRetxExhausted.Unset()
	}
	if !handled_NConngestionMarked && err == nil {
		value.NConngestionMarked.Unset()
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *GeneralStatus) Encode() enc.Wire {
	encoder := GeneralStatusEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *GeneralStatus) Bytes() []byte {
	return value.Encode().Join()
}

func ParseGeneralStatus(reader enc.WireView, ignoreCritical bool) (*GeneralStatus, error) {
	context := GeneralStatusParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FaceStatusEncoder struct {
	Length uint
}

type FaceStatusParsingContext struct {
}

func (encoder *FaceStatusEncoder) Init(value *FaceStatus) {

	l := uint(0)
	l += 1
	l += uint(1 + enc.Nat(value.FaceId).EncodingLength())
	l += 1
	l += uint(enc.TLNum(len(value.Uri)).EncodingLength())
	l += uint(len(value.Uri))
	l += 1
	l += uint(enc.TLNum(len(value.LocalUri)).EncodingLength())
	l += uint(len(value.LocalUri))
	if optval, ok := value.ExpirationPeriod.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	l += 1
	l += uint(1 + enc.Nat(value.FaceScope).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.FacePersistency).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.LinkType).EncodingLength())
	if optval, ok := value.BaseCongestionMarkInterval.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.DefaultCongestionThreshold.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.Mtu.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	l += 1
	l += uint(1 + enc.Nat(value.NInInterests).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NInData).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NInNacks).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NOutInterests).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NOutData).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NOutNacks).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NInBytes).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NOutBytes).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.Flags).EncodingLength())
	encoder.Length = l

}

func (context *FaceStatusParsingContext) Init() {

}

func (encoder *FaceStatusEncoder) EncodeInto(value *FaceStatus, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(105)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FaceId).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(114)
	pos += 1
	pos += uint(enc.TLNum(len(value.Uri)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.Uri)
	pos += uint(len(value.Uri))
	buf[pos] = byte(129)
	pos += 1
	pos += uint(enc.TLNum(len(value.LocalUri)).EncodeInto(buf[pos:]))
	copy(buf[pos:], value.LocalUri)
	pos += uint(len(value.LocalUri))
	if optval, ok := value.ExpirationPeriod.Get(); ok {
		buf[pos] = byte(109)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	buf[pos] = byte(132)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FaceScope).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(133)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FacePersistency).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(134)
	pos += 1

	buf[pos] = byte(enc.Nat(value.LinkType).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	if optval, ok := value.BaseCongestionMarkInterval.Get(); ok {
		buf[pos] = byte(135)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.DefaultCongestionThreshold.Get(); ok {
		buf[pos] = byte(136)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.Mtu.Get(); ok {
		buf[pos] = byte(137)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	buf[pos] = byte(144)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NInInterests).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(145)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NInData).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(151)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NInNacks).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(146)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NOutInterests).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(147)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NOutData).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(152)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NOutNacks).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(148)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NInBytes).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(149)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NOutBytes).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(108)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Flags).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

func (encoder *FaceStatusEncoder) Encode(value *FaceStatus) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FaceStatusParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FaceStatus, error) {

	var handled_FaceId bool = false
	var handled_Uri bool = false
	var handled_LocalUri bool = false
	var handled_ExpirationPeriod bool = false
	var handled_FaceScope bool = false
	var handled_FacePersistency bool = false
	var handled_LinkType bool = false
	var handled_BaseCongestionMarkInterval bool = false
	var handled_DefaultCongestionThreshold bool = false
	var handled_Mtu bool = false
	var handled_NInInterests bool = false
	var handled_NInData bool = false
	var handled_NInNacks bool = false
	var handled_NOutInterests bool = false
	var handled_NOutData bool = false
	var handled_NOutNacks bool = false
	var handled_NInBytes bool = false
	var handled_NOutBytes bool = false
	var handled_Flags bool = false

	progress := -1
	_ = progress

	value := &FaceStatus{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 105:
				if true {
					handled = true
					handled_FaceId = true
					value.FaceId = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FaceId = uint64(value.FaceId<<8) | uint64(x)
						}
					}
				}
			case 114:
				if true {
					handled = true
					handled_Uri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.Uri = builder.String()
						}
					}
				}
			case 129:
				if true {
					handled = true
					handled_LocalUri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.LocalUri = builder.String()
						}
					}
				}
			case 109:
				if true {
					handled = true
					handled_ExpirationPeriod = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.ExpirationPeriod.Set(optval)
					}
				}
			case 132:
				if true {
					handled = true
					handled_FaceScope = true
					value.FaceScope = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FaceScope = uint64(value.FaceScope<<8) | uint64(x)
						}
					}
				}
			case 133:
				if true {
					handled = true
					handled_FacePersistency = true
					value.FacePersistency = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FacePersistency = uint64(value.FacePersistency<<8) | uint64(x)
						}
					}
				}
			case 134:
				if true {
					handled = true
					handled_LinkType = true
					value.LinkType = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.LinkType = uint64(value.LinkType<<8) | uint64(x)
						}
					}
				}
			case 135:
				if true {
					handled = true
					handled_BaseCongestionMarkInterval = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.BaseCongestionMarkInterval.Set(optval)
					}
				}
			case 136:
				if true {
					handled = true
					handled_DefaultCongestionThreshold = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.DefaultCongestionThreshold.Set(optval)
					}
				}
			case 137:
				if true {
					handled = true
					handled_Mtu = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.Mtu.Set(optval)
					}
				}
			case 144:
				if true {
					handled = true
					handled_NInInterests = true
					value.NInInterests = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NInInterests = uint64(value.NInInterests<<8) | uint64(x)
						}
					}
				}
			case 145:
				if true {
					handled = true
					handled_NInData = true
					value.NInData = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NInData = uint64(value.NInData<<8) | uint64(x)
						}
					}
				}
			case 151:
				if true {
					handled = true
					handled_NInNacks = true
					value.NInNacks = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NInNacks = uint64(value.NInNacks<<8) | uint64(x)
						}
					}
				}
			case 146:
				if true {
					handled = true
					handled_NOutInterests = true
					value.NOutInterests = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NOutInterests = uint64(value.NOutInterests<<8) | uint64(x)
						}
					}
				}
			case 147:
				if true {
					handled = true
					handled_NOutData = true
					value.NOutData = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NOutData = uint64(value.NOutData<<8) | uint64(x)
						}
					}
				}
			case 152:
				if true {
					handled = true
					handled_NOutNacks = true
					value.NOutNacks = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NOutNacks = uint64(value.NOutNacks<<8) | uint64(x)
						}
					}
				}
			case 148:
				if true {
					handled = true
					handled_NInBytes = true
					value.NInBytes = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NInBytes = uint64(value.NInBytes<<8) | uint64(x)
						}
					}
				}
			case 149:
				if true {
					handled = true
					handled_NOutBytes = true
					value.NOutBytes = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NOutBytes = uint64(value.NOutBytes<<8) | uint64(x)
						}
					}
				}
			case 108:
				if true {
					handled = true
					handled_Flags = true
					value.Flags = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Flags = uint64(value.Flags<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_FaceId && err == nil {
		err = enc.ErrSkipRequired{Name: "FaceId", TypeNum: 105}
	}
	if !handled_Uri && err == nil {
		err = enc.ErrSkipRequired{Name: "Uri", TypeNum: 114}
	}
	if !handled_LocalUri && err == nil {
		err = enc.ErrSkipRequired{Name: "LocalUri", TypeNum: 129}
	}
	if !handled_ExpirationPeriod && err == nil {
		value.ExpirationPeriod.Unset()
	}
	if !handled_FaceScope && err == nil {
		err = enc.ErrSkipRequired{Name: "FaceScope", TypeNum: 132}
	}
	if !handled_FacePersistency && err == nil {
		err = enc.ErrSkipRequired{Name: "FacePersistency", TypeNum: 133}
	}
	if !handled_LinkType && err == nil {
		err = enc.ErrSkipRequired{Name: "LinkType", TypeNum: 134}
	}
	if !handled_BaseCongestionMarkInterval && err == nil {
		value.BaseCongestionMarkInterval.Unset()
	}
	if !handled_DefaultCongestionThreshold && err == nil {
		value.DefaultCongestionThreshold.Unset()
	}
	if !handled_Mtu && err == nil {
		value.Mtu.Unset()
	}
	if !handled_NInInterests && err == nil {
		err = enc.ErrSkipRequired{Name: "NInInterests", TypeNum: 144}
	}
	if !handled_NInData && err == nil {
		err = enc.ErrSkipRequired{Name: "NInData", TypeNum: 145}
	}
	if !handled_NInNacks && err == nil {
		err = enc.ErrSkipRequired{Name: "NInNacks", TypeNum: 151}
	}
	if !handled_NOutInterests && err == nil {
		err = enc.ErrSkipRequired{Name: "NOutInterests", TypeNum: 146}
	}
	if !handled_NOutData && err == nil {
		err = enc.ErrSkipRequired{Name: "NOutData", TypeNum: 147}
	}
	if !handled_NOutNacks && err == nil {
		err = enc.ErrSkipRequired{Name: "NOutNacks", TypeNum: 152}
	}
	if !handled_NInBytes && err == nil {
		err = enc.ErrSkipRequired{Name: "NInBytes", TypeNum: 148}
	}
	if !handled_NOutBytes && err == nil {
		err = enc.ErrSkipRequired{Name: "NOutBytes", TypeNum: 149}
	}
	if !handled_Flags && err == nil {
		err = enc.ErrSkipRequired{Name: "Flags", TypeNum: 108}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FaceStatus) Encode() enc.Wire {
	encoder := FaceStatusEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FaceStatus) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFaceStatus(reader enc.WireView, ignoreCritical bool) (*FaceStatus, error) {
	context := FaceStatusParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FaceStatusMsgEncoder struct {
	Length uint

	Vals_subencoder []struct {
		Vals_encoder FaceStatusEncoder
	}
}

type FaceStatusMsgParsingContext struct {
	Vals_context FaceStatusParsingContext
}

func (encoder *FaceStatusMsgEncoder) Init(value *FaceStatusMsg) {
	{
		Vals_l := len(value.Vals)
		encoder.Vals_subencoder = make([]struct {
			Vals_encoder FaceStatusEncoder
		}, Vals_l)
		for i := 0; i < Vals_l; i++ {
			pseudoEncoder := &encoder.Vals_subencoder[i]
			pseudoValue := struct {
				Vals *FaceStatus
			}{
				Vals: value.Vals[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Vals != nil {
					encoder.Vals_encoder.Init(value.Vals)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Vals != nil {
		for seq_i, seq_v := range value.Vals {
			pseudoEncoder := &encoder.Vals_subencoder[seq_i]
			pseudoValue := struct {
				Vals *FaceStatus
			}{
				Vals: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Vals != nil {
					l += 1
					l += uint(enc.TLNum(encoder.Vals_encoder.Length).EncodingLength())
					l += encoder.Vals_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

func (context *FaceStatusMsgParsingContext) Init() {
	context.Vals_context.Init()
}

func (encoder *FaceStatusMsgEncoder) EncodeInto(value *FaceStatusMsg, buf []byte) {

	pos := uint(0)

	if value.Vals != nil {
		for seq_i, seq_v := range value.Vals {
			pseudoEncoder := &encoder.Vals_subencoder[seq_i]
			pseudoValue := struct {
				Vals *FaceStatus
			}{
				Vals: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Vals != nil {
					buf[pos] = byte(128)
					pos += 1
					pos += uint(enc.TLNum(encoder.Vals_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.Vals_encoder.Length > 0 {
						encoder.Vals_encoder.EncodeInto(value.Vals, buf[pos:])
						pos += encoder.Vals_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

func (encoder *FaceStatusMsgEncoder) Encode(value *FaceStatusMsg) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FaceStatusMsgParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FaceStatusMsg, error) {

	var handled_Vals bool = false

	progress := -1
	_ = progress

	value := &FaceStatusMsg{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 128:
				if true {
					handled = true
					handled_Vals = true
					if value.Vals == nil {
						value.Vals = make([]*FaceStatus, 0)
					}
					{
						pseudoValue := struct {
							Vals *FaceStatus
						}{}
						{
							value := &pseudoValue
							value.Vals, err = context.Vals_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.Vals = append(value.Vals, pseudoValue.Vals)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Vals && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FaceStatusMsg) Encode() enc.Wire {
	encoder := FaceStatusMsgEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FaceStatusMsg) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFaceStatusMsg(reader enc.WireView, ignoreCritical bool) (*FaceStatusMsg, error) {
	context := FaceStatusMsgParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FaceQueryFilterValueEncoder struct {
	Length uint
}

type FaceQueryFilterValueParsingContext struct {
}

func (encoder *FaceQueryFilterValueEncoder) Init(value *FaceQueryFilterValue) {

	l := uint(0)
	if optval, ok := value.FaceId.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.UriScheme.Get(); ok {
		l += 1
		l += uint(enc.TLNum(len(optval)).EncodingLength())
		l += uint(len(optval))
	}
	if optval, ok := value.Uri.Get(); ok {
		l += 1
		l += uint(enc.TLNum(len(optval)).EncodingLength())
		l += uint(len(optval))
	}
	if optval, ok := value.LocalUri.Get(); ok {
		l += 1
		l += uint(enc.TLNum(len(optval)).EncodingLength())
		l += uint(len(optval))
	}
	if optval, ok := value.FaceScope.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.FacePersistency.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	if optval, ok := value.LinkType.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	encoder.Length = l

}

func (context *FaceQueryFilterValueParsingContext) Init() {

}

func (encoder *FaceQueryFilterValueEncoder) EncodeInto(value *FaceQueryFilterValue, buf []byte) {

	pos := uint(0)

	if optval, ok := value.FaceId.Get(); ok {
		buf[pos] = byte(105)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.UriScheme.Get(); ok {
		buf[pos] = byte(131)
		pos += 1
		pos += uint(enc.TLNum(len(optval)).EncodeInto(buf[pos:]))
		copy(buf[pos:], optval)
		pos += uint(len(optval))
	}
	if optval, ok := value.Uri.Get(); ok {
		buf[pos] = byte(114)
		pos += 1
		pos += uint(enc.TLNum(len(optval)).EncodeInto(buf[pos:]))
		copy(buf[pos:], optval)
		pos += uint(len(optval))
	}
	if optval, ok := value.LocalUri.Get(); ok {
		buf[pos] = byte(129)
		pos += 1
		pos += uint(enc.TLNum(len(optval)).EncodeInto(buf[pos:]))
		copy(buf[pos:], optval)
		pos += uint(len(optval))
	}
	if optval, ok := value.FaceScope.Get(); ok {
		buf[pos] = byte(132)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.FacePersistency.Get(); ok {
		buf[pos] = byte(133)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
	if optval, ok := value.LinkType.Get(); ok {
		buf[pos] = byte(134)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
}

func (encoder *FaceQueryFilterValueEncoder) Encode(value *FaceQueryFilterValue) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FaceQueryFilterValueParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FaceQueryFilterValue, error) {

	var handled_FaceId bool = false
	var handled_UriScheme bool = false
	var handled_Uri bool = false
	var handled_LocalUri bool = false
	var handled_FaceScope bool = false
	var handled_FacePersistency bool = false
	var handled_LinkType bool = false

	progress := -1
	_ = progress

	value := &FaceQueryFilterValue{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 105:
				if true {
					handled = true
					handled_FaceId = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.FaceId.Set(optval)
					}
				}
			case 131:
				if true {
					handled = true
					handled_UriScheme = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.UriScheme.Set(builder.String())
						}
					}
				}
			case 114:
				if true {
					handled = true
					handled_Uri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.Uri.Set(builder.String())
						}
					}
				}
			case 129:
				if true {
					handled = true
					handled_LocalUri = true
					{
						var builder strings.Builder
						_, err = reader.CopyN(&builder, int(l))
						if err == nil {
							value.LocalUri.Set(builder.String())
						}
					}
				}
			case 132:
				if true {
					handled = true
					handled_FaceScope = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.FaceScope.Set(optval)
					}
				}
			case 133:
				if true {
					handled = true
					handled_FacePersistency = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.FacePersistency.Set(optval)
					}
				}
			case 134:
				if true {
					handled = true
					handled_LinkType = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.LinkType.Set(optval)
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_FaceId && err == nil {
		value.FaceId.Unset()
	}
	if !handled_UriScheme && err == nil {
		value.UriScheme.Unset()
	}
	if !handled_Uri && err == nil {
		value.Uri.Unset()
	}
	if !handled_LocalUri && err == nil {
		value.LocalUri.Unset()
	}
	if !handled_FaceScope && err == nil {
		value.FaceScope.Unset()
	}
	if !handled_FacePersistency && err == nil {
		value.FacePersistency.Unset()
	}
	if !handled_LinkType && err == nil {
		value.LinkType.Unset()
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FaceQueryFilterValue) Encode() enc.Wire {
	encoder := FaceQueryFilterValueEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FaceQueryFilterValue) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFaceQueryFilterValue(reader enc.WireView, ignoreCritical bool) (*FaceQueryFilterValue, error) {
	context := FaceQueryFilterValueParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FaceQueryFilterEncoder struct {
	Length uint

	Val_encoder FaceQueryFilterValueEncoder
}

type FaceQueryFilterParsingContext struct {
	Val_context FaceQueryFilterValueParsingContext
}

func (encoder *FaceQueryFilterEncoder) Init(value *FaceQueryFilter) {
	if value.Val != nil {
		encoder.Val_encoder.Init(value.Val)
	}

	l := uint(0)
	if value.Val != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Val_encoder.Length).EncodingLength())
		l += encoder.Val_encoder.Length
	}
	encoder.Length = l

}

func (context *FaceQueryFilterParsingContext) Init() {
	context.Val_context.Init()
}

func (encoder *FaceQueryFilterEncoder) EncodeInto(value *FaceQueryFilter, buf []byte) {

	pos := uint(0)

	if value.Val != nil {
		buf[pos] = byte(150)
		pos += 1
		pos += uint(enc.TLNum(encoder.Val_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Val_encoder.Length > 0 {
			encoder.Val_encoder.EncodeInto(value.Val, buf[pos:])
			pos += encoder.Val_encoder.Length
		}
	}
}

func (encoder *FaceQueryFilterEncoder) Encode(value *FaceQueryFilter) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FaceQueryFilterParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FaceQueryFilter, error) {

	var handled_Val bool = false

	progress := -1
	_ = progress

	value := &FaceQueryFilter{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 150:
				if true {
					handled = true
					handled_Val = true
					value.Val, err = context.Val_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Val && err == nil {
		value.Val = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FaceQueryFilter) Encode() enc.Wire {
	encoder := FaceQueryFilterEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FaceQueryFilter) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFaceQueryFilter(reader enc.WireView, ignoreCritical bool) (*FaceQueryFilter, error) {
	context := FaceQueryFilterParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type RouteEncoder struct {
	Length uint
}

type RouteParsingContext struct {
}

func (encoder *RouteEncoder) Init(value *Route) {

	l := uint(0)
	l += 1
	l += uint(1 + enc.Nat(value.FaceId).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.Origin).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.Cost).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.Flags).EncodingLength())
	if optval, ok := value.ExpirationPeriod.Get(); ok {
		l += 1
		l += uint(1 + enc.Nat(optval).EncodingLength())
	}
	encoder.Length = l

}

func (context *RouteParsingContext) Init() {

}

func (encoder *RouteEncoder) EncodeInto(value *Route, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(105)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FaceId).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(111)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Origin).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(106)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Cost).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(108)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Flags).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	if optval, ok := value.ExpirationPeriod.Get(); ok {
		buf[pos] = byte(109)
		pos += 1

		buf[pos] = byte(enc.Nat(optval).EncodeInto(buf[pos+1:]))
		pos += uint(1 + buf[pos])

	}
}

func (encoder *RouteEncoder) Encode(value *Route) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *RouteParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*Route, error) {

	var handled_FaceId bool = false
	var handled_Origin bool = false
	var handled_Cost bool = false
	var handled_Flags bool = false
	var handled_ExpirationPeriod bool = false

	progress := -1
	_ = progress

	value := &Route{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 105:
				if true {
					handled = true
					handled_FaceId = true
					value.FaceId = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FaceId = uint64(value.FaceId<<8) | uint64(x)
						}
					}
				}
			case 111:
				if true {
					handled = true
					handled_Origin = true
					value.Origin = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Origin = uint64(value.Origin<<8) | uint64(x)
						}
					}
				}
			case 106:
				if true {
					handled = true
					handled_Cost = true
					value.Cost = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Cost = uint64(value.Cost<<8) | uint64(x)
						}
					}
				}
			case 108:
				if true {
					handled = true
					handled_Flags = true
					value.Flags = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Flags = uint64(value.Flags<<8) | uint64(x)
						}
					}
				}
			case 109:
				if true {
					handled = true
					handled_ExpirationPeriod = true
					{
						optval := uint64(0)
						optval = uint64(0)
						{
							for i := 0; i < int(l); i++ {
								x := byte(0)
								x, err = reader.ReadByte()
								if err != nil {
									if err == io.EOF {
										err = io.ErrUnexpectedEOF
									}
									break
								}
								optval = uint64(optval<<8) | uint64(x)
							}
						}
						value.ExpirationPeriod.Set(optval)
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_FaceId && err == nil {
		err = enc.ErrSkipRequired{Name: "FaceId", TypeNum: 105}
	}
	if !handled_Origin && err == nil {
		err = enc.ErrSkipRequired{Name: "Origin", TypeNum: 111}
	}
	if !handled_Cost && err == nil {
		err = enc.ErrSkipRequired{Name: "Cost", TypeNum: 106}
	}
	if !handled_Flags && err == nil {
		err = enc.ErrSkipRequired{Name: "Flags", TypeNum: 108}
	}
	if !handled_ExpirationPeriod && err == nil {
		value.ExpirationPeriod.Unset()
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *Route) Encode() enc.Wire {
	encoder := RouteEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *Route) Bytes() []byte {
	return value.Encode().Join()
}

func ParseRoute(reader enc.WireView, ignoreCritical bool) (*Route, error) {
	context := RouteParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type RibEntryEncoder struct {
	Length uint

	Name_length       uint
	Routes_subencoder []struct {
		Routes_encoder RouteEncoder
	}
}

type RibEntryParsingContext struct {
	Routes_context RouteParsingContext
}

func (encoder *RibEntryEncoder) Init(value *RibEntry) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}
	{
		Routes_l := len(value.Routes)
		encoder.Routes_subencoder = make([]struct {
			Routes_encoder RouteEncoder
		}, Routes_l)
		for i := 0; i < Routes_l; i++ {
			pseudoEncoder := &encoder.Routes_subencoder[i]
			pseudoValue := struct {
				Routes *Route
			}{
				Routes: value.Routes[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Routes != nil {
					encoder.Routes_encoder.Init(value.Routes)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	if value.Routes != nil {
		for seq_i, seq_v := range value.Routes {
			pseudoEncoder := &encoder.Routes_subencoder[seq_i]
			pseudoValue := struct {
				Routes *Route
			}{
				Routes: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Routes != nil {
					l += 1
					l += uint(enc.TLNum(encoder.Routes_encoder.Length).EncodingLength())
					l += encoder.Routes_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

func (context *RibEntryParsingContext) Init() {

	context.Routes_context.Init()
}

func (encoder *RibEntryEncoder) EncodeInto(value *RibEntry, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	if value.Routes != nil {
		for seq_i, seq_v := range value.Routes {
			pseudoEncoder := &encoder.Routes_subencoder[seq_i]
			pseudoValue := struct {
				Routes *Route
			}{
				Routes: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Routes != nil {
					buf[pos] = byte(129)
					pos += 1
					pos += uint(enc.TLNum(encoder.Routes_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.Routes_encoder.Length > 0 {
						encoder.Routes_encoder.EncodeInto(value.Routes, buf[pos:])
						pos += encoder.Routes_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

func (encoder *RibEntryEncoder) Encode(value *RibEntry) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *RibEntryParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*RibEntry, error) {

	var handled_Name bool = false
	var handled_Routes bool = false

	progress := -1
	_ = progress

	value := &RibEntry{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			case 129:
				if true {
					handled = true
					handled_Routes = true
					if value.Routes == nil {
						value.Routes = make([]*Route, 0)
					}
					{
						pseudoValue := struct {
							Routes *Route
						}{}
						{
							value := &pseudoValue
							value.Routes, err = context.Routes_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.Routes = append(value.Routes, pseudoValue.Routes)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}
	if !handled_Routes && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *RibEntry) Encode() enc.Wire {
	encoder := RibEntryEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *RibEntry) Bytes() []byte {
	return value.Encode().Join()
}

func ParseRibEntry(reader enc.WireView, ignoreCritical bool) (*RibEntry, error) {
	context := RibEntryParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type RibStatusEncoder struct {
	Length uint

	Entries_subencoder []struct {
		Entries_encoder RibEntryEncoder
	}
}

type RibStatusParsingContext struct {
	Entries_context RibEntryParsingContext
}

func (encoder *RibStatusEncoder) Init(value *RibStatus) {
	{
		Entries_l := len(value.Entries)
		encoder.Entries_subencoder = make([]struct {
			Entries_encoder RibEntryEncoder
		}, Entries_l)
		for i := 0; i < Entries_l; i++ {
			pseudoEncoder := &encoder.Entries_subencoder[i]
			pseudoValue := struct {
				Entries *RibEntry
			}{
				Entries: value.Entries[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					encoder.Entries_encoder.Init(value.Entries)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Entries != nil {
		for seq_i, seq_v := range value.Entries {
			pseudoEncoder := &encoder.Entries_subencoder[seq_i]
			pseudoValue := struct {
				Entries *RibEntry
			}{
				Entries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					l += 1
					l += uint(enc.TLNum(encoder.Entries_encoder.Length).EncodingLength())
					l += encoder.Entries_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

func (context *RibStatusParsingContext) Init() {
	context.Entries_context.Init()
}

func (encoder *RibStatusEncoder) EncodeInto(value *RibStatus, buf []byte) {

	pos := uint(0)

	if value.Entries != nil {
		for seq_i, seq_v := range value.Entries {
			pseudoEncoder := &encoder.Entries_subencoder[seq_i]
			pseudoValue := struct {
				Entries *RibEntry
			}{
				Entries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					buf[pos] = byte(128)
					pos += 1
					pos += uint(enc.TLNum(encoder.Entries_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.Entries_encoder.Length > 0 {
						encoder.Entries_encoder.EncodeInto(value.Entries, buf[pos:])
						pos += encoder.Entries_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

func (encoder *RibStatusEncoder) Encode(value *RibStatus) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *RibStatusParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*RibStatus, error) {

	var handled_Entries bool = false

	progress := -1
	_ = progress

	value := &RibStatus{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 128:
				if true {
					handled = true
					handled_Entries = true
					if value.Entries == nil {
						value.Entries = make([]*RibEntry, 0)
					}
					{
						pseudoValue := struct {
							Entries *RibEntry
						}{}
						{
							value := &pseudoValue
							value.Entries, err = context.Entries_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.Entries = append(value.Entries, pseudoValue.Entries)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Entries && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *RibStatus) Encode() enc.Wire {
	encoder := RibStatusEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *RibStatus) Bytes() []byte {
	return value.Encode().Join()
}

func ParseRibStatus(reader enc.WireView, ignoreCritical bool) (*RibStatus, error) {
	context := RibStatusParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type NextHopRecordEncoder struct {
	Length uint
}

type NextHopRecordParsingContext struct {
}

func (encoder *NextHopRecordEncoder) Init(value *NextHopRecord) {

	l := uint(0)
	l += 1
	l += uint(1 + enc.Nat(value.FaceId).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.Cost).EncodingLength())
	encoder.Length = l

}

func (context *NextHopRecordParsingContext) Init() {

}

func (encoder *NextHopRecordEncoder) EncodeInto(value *NextHopRecord, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(105)
	pos += 1

	buf[pos] = byte(enc.Nat(value.FaceId).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(106)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Cost).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

func (encoder *NextHopRecordEncoder) Encode(value *NextHopRecord) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *NextHopRecordParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*NextHopRecord, error) {

	var handled_FaceId bool = false
	var handled_Cost bool = false

	progress := -1
	_ = progress

	value := &NextHopRecord{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 105:
				if true {
					handled = true
					handled_FaceId = true
					value.FaceId = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.FaceId = uint64(value.FaceId<<8) | uint64(x)
						}
					}
				}
			case 106:
				if true {
					handled = true
					handled_Cost = true
					value.Cost = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Cost = uint64(value.Cost<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_FaceId && err == nil {
		err = enc.ErrSkipRequired{Name: "FaceId", TypeNum: 105}
	}
	if !handled_Cost && err == nil {
		err = enc.ErrSkipRequired{Name: "Cost", TypeNum: 106}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *NextHopRecord) Encode() enc.Wire {
	encoder := NextHopRecordEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *NextHopRecord) Bytes() []byte {
	return value.Encode().Join()
}

func ParseNextHopRecord(reader enc.WireView, ignoreCritical bool) (*NextHopRecord, error) {
	context := NextHopRecordParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FibEntryEncoder struct {
	Length uint

	Name_length               uint
	NextHopRecords_subencoder []struct {
		NextHopRecords_encoder NextHopRecordEncoder
	}
}

type FibEntryParsingContext struct {
	NextHopRecords_context NextHopRecordParsingContext
}

func (encoder *FibEntryEncoder) Init(value *FibEntry) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}
	{
		NextHopRecords_l := len(value.NextHopRecords)
		encoder.NextHopRecords_subencoder = make([]struct {
			NextHopRecords_encoder NextHopRecordEncoder
		}, NextHopRecords_l)
		for i := 0; i < NextHopRecords_l; i++ {
			pseudoEncoder := &encoder.NextHopRecords_subencoder[i]
			pseudoValue := struct {
				NextHopRecords *NextHopRecord
			}{
				NextHopRecords: value.NextHopRecords[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.NextHopRecords != nil {
					encoder.NextHopRecords_encoder.Init(value.NextHopRecords)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	if value.NextHopRecords != nil {
		for seq_i, seq_v := range value.NextHopRecords {
			pseudoEncoder := &encoder.NextHopRecords_subencoder[seq_i]
			pseudoValue := struct {
				NextHopRecords *NextHopRecord
			}{
				NextHopRecords: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.NextHopRecords != nil {
					l += 1
					l += uint(enc.TLNum(encoder.NextHopRecords_encoder.Length).EncodingLength())
					l += encoder.NextHopRecords_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

func (context *FibEntryParsingContext) Init() {

	context.NextHopRecords_context.Init()
}

func (encoder *FibEntryEncoder) EncodeInto(value *FibEntry, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	if value.NextHopRecords != nil {
		for seq_i, seq_v := range value.NextHopRecords {
			pseudoEncoder := &encoder.NextHopRecords_subencoder[seq_i]
			pseudoValue := struct {
				NextHopRecords *NextHopRecord
			}{
				NextHopRecords: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.NextHopRecords != nil {
					buf[pos] = byte(129)
					pos += 1
					pos += uint(enc.TLNum(encoder.NextHopRecords_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.NextHopRecords_encoder.Length > 0 {
						encoder.NextHopRecords_encoder.EncodeInto(value.NextHopRecords, buf[pos:])
						pos += encoder.NextHopRecords_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

func (encoder *FibEntryEncoder) Encode(value *FibEntry) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FibEntryParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FibEntry, error) {

	var handled_Name bool = false
	var handled_NextHopRecords bool = false

	progress := -1
	_ = progress

	value := &FibEntry{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			case 129:
				if true {
					handled = true
					handled_NextHopRecords = true
					if value.NextHopRecords == nil {
						value.NextHopRecords = make([]*NextHopRecord, 0)
					}
					{
						pseudoValue := struct {
							NextHopRecords *NextHopRecord
						}{}
						{
							value := &pseudoValue
							value.NextHopRecords, err = context.NextHopRecords_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.NextHopRecords = append(value.NextHopRecords, pseudoValue.NextHopRecords)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}
	if !handled_NextHopRecords && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FibEntry) Encode() enc.Wire {
	encoder := FibEntryEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FibEntry) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFibEntry(reader enc.WireView, ignoreCritical bool) (*FibEntry, error) {
	context := FibEntryParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type FibStatusEncoder struct {
	Length uint

	Entries_subencoder []struct {
		Entries_encoder FibEntryEncoder
	}
}

type FibStatusParsingContext struct {
	Entries_context FibEntryParsingContext
}

func (encoder *FibStatusEncoder) Init(value *FibStatus) {
	{
		Entries_l := len(value.Entries)
		encoder.Entries_subencoder = make([]struct {
			Entries_encoder FibEntryEncoder
		}, Entries_l)
		for i := 0; i < Entries_l; i++ {
			pseudoEncoder := &encoder.Entries_subencoder[i]
			pseudoValue := struct {
				Entries *FibEntry
			}{
				Entries: value.Entries[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					encoder.Entries_encoder.Init(value.Entries)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.Entries != nil {
		for seq_i, seq_v := range value.Entries {
			pseudoEncoder := &encoder.Entries_subencoder[seq_i]
			pseudoValue := struct {
				Entries *FibEntry
			}{
				Entries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					l += 1
					l += uint(enc.TLNum(encoder.Entries_encoder.Length).EncodingLength())
					l += encoder.Entries_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

func (context *FibStatusParsingContext) Init() {
	context.Entries_context.Init()
}

func (encoder *FibStatusEncoder) EncodeInto(value *FibStatus, buf []byte) {

	pos := uint(0)

	if value.Entries != nil {
		for seq_i, seq_v := range value.Entries {
			pseudoEncoder := &encoder.Entries_subencoder[seq_i]
			pseudoValue := struct {
				Entries *FibEntry
			}{
				Entries: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.Entries != nil {
					buf[pos] = byte(128)
					pos += 1
					pos += uint(enc.TLNum(encoder.Entries_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.Entries_encoder.Length > 0 {
						encoder.Entries_encoder.EncodeInto(value.Entries, buf[pos:])
						pos += encoder.Entries_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

func (encoder *FibStatusEncoder) Encode(value *FibStatus) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *FibStatusParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*FibStatus, error) {

	var handled_Entries bool = false

	progress := -1
	_ = progress

	value := &FibStatus{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 128:
				if true {
					handled = true
					handled_Entries = true
					if value.Entries == nil {
						value.Entries = make([]*FibEntry, 0)
					}
					{
						pseudoValue := struct {
							Entries *FibEntry
						}{}
						{
							value := &pseudoValue
							value.Entries, err = context.Entries_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.Entries = append(value.Entries, pseudoValue.Entries)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Entries && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *FibStatus) Encode() enc.Wire {
	encoder := FibStatusEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *FibStatus) Bytes() []byte {
	return value.Encode().Join()
}

func ParseFibStatus(reader enc.WireView, ignoreCritical bool) (*FibStatus, error) {
	context := FibStatusParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type StrategyChoiceEncoder struct {
	Length uint

	Name_length      uint
	Strategy_encoder StrategyEncoder
}

type StrategyChoiceParsingContext struct {
	Strategy_context StrategyParsingContext
}

func (encoder *StrategyChoiceEncoder) Init(value *StrategyChoice) {
	if value.Name != nil {
		encoder.Name_length = 0
		for _, c := range value.Name {
			encoder.Name_length += uint(c.EncodingLength())
		}
	}
	if value.Strategy != nil {
		encoder.Strategy_encoder.Init(value.Strategy)
	}

	l := uint(0)
	if value.Name != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Name_length).EncodingLength())
		l += encoder.Name_length
	}
	if value.Strategy != nil {
		l += 1
		l += uint(enc.TLNum(encoder.Strategy_encoder.Length).EncodingLength())
		l += encoder.Strategy_encoder.Length
	}
	encoder.Length = l

}

func (context *StrategyChoiceParsingContext) Init() {

	context.Strategy_context.Init()
}

func (encoder *StrategyChoiceEncoder) EncodeInto(value *StrategyChoice, buf []byte) {

	pos := uint(0)

	if value.Name != nil {
		buf[pos] = byte(7)
		pos += 1
		pos += uint(enc.TLNum(encoder.Name_length).EncodeInto(buf[pos:]))
		for _, c := range value.Name {
			pos += uint(c.EncodeInto(buf[pos:]))
		}
	}
	if value.Strategy != nil {
		buf[pos] = byte(107)
		pos += 1
		pos += uint(enc.TLNum(encoder.Strategy_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.Strategy_encoder.Length > 0 {
			encoder.Strategy_encoder.EncodeInto(value.Strategy, buf[pos:])
			pos += encoder.Strategy_encoder.Length
		}
	}
}

func (encoder *StrategyChoiceEncoder) Encode(value *StrategyChoice) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *StrategyChoiceParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*StrategyChoice, error) {

	var handled_Name bool = false
	var handled_Strategy bool = false

	progress := -1
	_ = progress

	value := &StrategyChoice{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 7:
				if true {
					handled = true
					handled_Name = true
					delegate := reader.Delegate(int(l))
					value.Name, err = delegate.ReadName()
				}
			case 107:
				if true {
					handled = true
					handled_Strategy = true
					value.Strategy, err = context.Strategy_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Name && err == nil {
		value.Name = nil
	}
	if !handled_Strategy && err == nil {
		value.Strategy = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *StrategyChoice) Encode() enc.Wire {
	encoder := StrategyChoiceEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *StrategyChoice) Bytes() []byte {
	return value.Encode().Join()
}

func ParseStrategyChoice(reader enc.WireView, ignoreCritical bool) (*StrategyChoice, error) {
	context := StrategyChoiceParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type StrategyChoiceMsgEncoder struct {
	Length uint

	StrategyChoices_subencoder []struct {
		StrategyChoices_encoder StrategyChoiceEncoder
	}
}

type StrategyChoiceMsgParsingContext struct {
	StrategyChoices_context StrategyChoiceParsingContext
}

func (encoder *StrategyChoiceMsgEncoder) Init(value *StrategyChoiceMsg) {
	{
		StrategyChoices_l := len(value.StrategyChoices)
		encoder.StrategyChoices_subencoder = make([]struct {
			StrategyChoices_encoder StrategyChoiceEncoder
		}, StrategyChoices_l)
		for i := 0; i < StrategyChoices_l; i++ {
			pseudoEncoder := &encoder.StrategyChoices_subencoder[i]
			pseudoValue := struct {
				StrategyChoices *StrategyChoice
			}{
				StrategyChoices: value.StrategyChoices[i],
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.StrategyChoices != nil {
					encoder.StrategyChoices_encoder.Init(value.StrategyChoices)
				}
				_ = encoder
				_ = value
			}
		}
	}

	l := uint(0)
	if value.StrategyChoices != nil {
		for seq_i, seq_v := range value.StrategyChoices {
			pseudoEncoder := &encoder.StrategyChoices_subencoder[seq_i]
			pseudoValue := struct {
				StrategyChoices *StrategyChoice
			}{
				StrategyChoices: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.StrategyChoices != nil {
					l += 1
					l += uint(enc.TLNum(encoder.StrategyChoices_encoder.Length).EncodingLength())
					l += encoder.StrategyChoices_encoder.Length
				}
				_ = encoder
				_ = value
			}
		}
	}
	encoder.Length = l

}

func (context *StrategyChoiceMsgParsingContext) Init() {
	context.StrategyChoices_context.Init()
}

func (encoder *StrategyChoiceMsgEncoder) EncodeInto(value *StrategyChoiceMsg, buf []byte) {

	pos := uint(0)

	if value.StrategyChoices != nil {
		for seq_i, seq_v := range value.StrategyChoices {
			pseudoEncoder := &encoder.StrategyChoices_subencoder[seq_i]
			pseudoValue := struct {
				StrategyChoices *StrategyChoice
			}{
				StrategyChoices: seq_v,
			}
			{
				encoder := pseudoEncoder
				value := &pseudoValue
				if value.StrategyChoices != nil {
					buf[pos] = byte(128)
					pos += 1
					pos += uint(enc.TLNum(encoder.StrategyChoices_encoder.Length).EncodeInto(buf[pos:]))
					if encoder.StrategyChoices_encoder.Length > 0 {
						encoder.StrategyChoices_encoder.EncodeInto(value.StrategyChoices, buf[pos:])
						pos += encoder.StrategyChoices_encoder.Length
					}
				}
				_ = encoder
				_ = value
			}
		}
	}
}

func (encoder *StrategyChoiceMsgEncoder) Encode(value *StrategyChoiceMsg) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *StrategyChoiceMsgParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*StrategyChoiceMsg, error) {

	var handled_StrategyChoices bool = false

	progress := -1
	_ = progress

	value := &StrategyChoiceMsg{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 128:
				if true {
					handled = true
					handled_StrategyChoices = true
					if value.StrategyChoices == nil {
						value.StrategyChoices = make([]*StrategyChoice, 0)
					}
					{
						pseudoValue := struct {
							StrategyChoices *StrategyChoice
						}{}
						{
							value := &pseudoValue
							value.StrategyChoices, err = context.StrategyChoices_context.Parse(reader.Delegate(int(l)), ignoreCritical)
							_ = value
						}
						value.StrategyChoices = append(value.StrategyChoices, pseudoValue.StrategyChoices)
					}
					progress--
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_StrategyChoices && err == nil {
		// sequence - skip
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *StrategyChoiceMsg) Encode() enc.Wire {
	encoder := StrategyChoiceMsgEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *StrategyChoiceMsg) Bytes() []byte {
	return value.Encode().Join()
}

func ParseStrategyChoiceMsg(reader enc.WireView, ignoreCritical bool) (*StrategyChoiceMsg, error) {
	context := StrategyChoiceMsgParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type CsInfoEncoder struct {
	Length uint
}

type CsInfoParsingContext struct {
}

func (encoder *CsInfoEncoder) Init(value *CsInfo) {

	l := uint(0)
	l += 1
	l += uint(1 + enc.Nat(value.Capacity).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.Flags).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NCsEntries).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NHits).EncodingLength())
	l += 1
	l += uint(1 + enc.Nat(value.NMisses).EncodingLength())
	encoder.Length = l

}

func (context *CsInfoParsingContext) Init() {

}

func (encoder *CsInfoEncoder) EncodeInto(value *CsInfo, buf []byte) {

	pos := uint(0)

	buf[pos] = byte(131)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Capacity).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(108)
	pos += 1

	buf[pos] = byte(enc.Nat(value.Flags).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(135)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NCsEntries).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(129)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NHits).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
	buf[pos] = byte(130)
	pos += 1

	buf[pos] = byte(enc.Nat(value.NMisses).EncodeInto(buf[pos+1:]))
	pos += uint(1 + buf[pos])
}

func (encoder *CsInfoEncoder) Encode(value *CsInfo) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *CsInfoParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*CsInfo, error) {

	var handled_Capacity bool = false
	var handled_Flags bool = false
	var handled_NCsEntries bool = false
	var handled_NHits bool = false
	var handled_NMisses bool = false

	progress := -1
	_ = progress

	value := &CsInfo{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 131:
				if true {
					handled = true
					handled_Capacity = true
					value.Capacity = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Capacity = uint64(value.Capacity<<8) | uint64(x)
						}
					}
				}
			case 108:
				if true {
					handled = true
					handled_Flags = true
					value.Flags = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.Flags = uint64(value.Flags<<8) | uint64(x)
						}
					}
				}
			case 135:
				if true {
					handled = true
					handled_NCsEntries = true
					value.NCsEntries = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NCsEntries = uint64(value.NCsEntries<<8) | uint64(x)
						}
					}
				}
			case 129:
				if true {
					handled = true
					handled_NHits = true
					value.NHits = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NHits = uint64(value.NHits<<8) | uint64(x)
						}
					}
				}
			case 130:
				if true {
					handled = true
					handled_NMisses = true
					value.NMisses = uint64(0)
					{
						for i := 0; i < int(l); i++ {
							x := byte(0)
							x, err = reader.ReadByte()
							if err != nil {
								if err == io.EOF {
									err = io.ErrUnexpectedEOF
								}
								break
							}
							value.NMisses = uint64(value.NMisses<<8) | uint64(x)
						}
					}
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_Capacity && err == nil {
		err = enc.ErrSkipRequired{Name: "Capacity", TypeNum: 131}
	}
	if !handled_Flags && err == nil {
		err = enc.ErrSkipRequired{Name: "Flags", TypeNum: 108}
	}
	if !handled_NCsEntries && err == nil {
		err = enc.ErrSkipRequired{Name: "NCsEntries", TypeNum: 135}
	}
	if !handled_NHits && err == nil {
		err = enc.ErrSkipRequired{Name: "NHits", TypeNum: 129}
	}
	if !handled_NMisses && err == nil {
		err = enc.ErrSkipRequired{Name: "NMisses", TypeNum: 130}
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *CsInfo) Encode() enc.Wire {
	encoder := CsInfoEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *CsInfo) Bytes() []byte {
	return value.Encode().Join()
}

func ParseCsInfo(reader enc.WireView, ignoreCritical bool) (*CsInfo, error) {
	context := CsInfoParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}

type CsInfoMsgEncoder struct {
	Length uint

	CsInfo_encoder CsInfoEncoder
}

type CsInfoMsgParsingContext struct {
	CsInfo_context CsInfoParsingContext
}

func (encoder *CsInfoMsgEncoder) Init(value *CsInfoMsg) {
	if value.CsInfo != nil {
		encoder.CsInfo_encoder.Init(value.CsInfo)
	}

	l := uint(0)
	if value.CsInfo != nil {
		l += 1
		l += uint(enc.TLNum(encoder.CsInfo_encoder.Length).EncodingLength())
		l += encoder.CsInfo_encoder.Length
	}
	encoder.Length = l

}

func (context *CsInfoMsgParsingContext) Init() {
	context.CsInfo_context.Init()
}

func (encoder *CsInfoMsgEncoder) EncodeInto(value *CsInfoMsg, buf []byte) {

	pos := uint(0)

	if value.CsInfo != nil {
		buf[pos] = byte(128)
		pos += 1
		pos += uint(enc.TLNum(encoder.CsInfo_encoder.Length).EncodeInto(buf[pos:]))
		if encoder.CsInfo_encoder.Length > 0 {
			encoder.CsInfo_encoder.EncodeInto(value.CsInfo, buf[pos:])
			pos += encoder.CsInfo_encoder.Length
		}
	}
}

func (encoder *CsInfoMsgEncoder) Encode(value *CsInfoMsg) enc.Wire {

	wire := make(enc.Wire, 1)
	wire[0] = make([]byte, encoder.Length)
	buf := wire[0]
	encoder.EncodeInto(value, buf)

	return wire
}

func (context *CsInfoMsgParsingContext) Parse(reader enc.WireView, ignoreCritical bool) (*CsInfoMsg, error) {

	var handled_CsInfo bool = false

	progress := -1
	_ = progress

	value := &CsInfoMsg{}
	var err error
	var startPos int
	for {
		startPos = reader.Pos()
		if startPos >= reader.Length() {
			break
		}
		typ := enc.TLNum(0)
		l := enc.TLNum(0)
		typ, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}
		l, err = reader.ReadTLNum()
		if err != nil {
			return nil, enc.ErrFailToParse{TypeNum: 0, Err: err}
		}

		err = nil
		if handled := false; true {
			switch typ {
			case 128:
				if true {
					handled = true
					handled_CsInfo = true
					value.CsInfo, err = context.CsInfo_context.Parse(reader.Delegate(int(l)), ignoreCritical)
				}
			default:
				if !ignoreCritical && ((typ <= 31) || ((typ & 1) == 1)) {
					return nil, enc.ErrUnrecognizedField{TypeNum: typ}
				}
				handled = true
				err = reader.Skip(int(l))
			}
			if err == nil && !handled {
			}
			if err != nil {
				return nil, enc.ErrFailToParse{TypeNum: typ, Err: err}
			}
		}
	}

	startPos = reader.Pos()
	err = nil

	if !handled_CsInfo && err == nil {
		value.CsInfo = nil
	}

	if err != nil {
		return nil, err
	}

	return value, nil
}

func (value *CsInfoMsg) Encode() enc.Wire {
	encoder := CsInfoMsgEncoder{}
	encoder.Init(value)
	return encoder.Encode(value)
}

func (value *CsInfoMsg) Bytes() []byte {
	return value.Encode().Join()
}

func ParseCsInfoMsg(reader enc.WireView, ignoreCritical bool) (*CsInfoMsg, error) {
	context := CsInfoMsgParsingContext{}
	context.Init()
	return context.Parse(reader, ignoreCritical)
}
